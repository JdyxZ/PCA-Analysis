library(FactoMineR)
library(factoextra)
library(ellipse)
library(car)
pca <- PCA(rotated_data,ncp=3,graph=FALSE)
#Dades i grafics interessants sobre la variància i desviació estàndard de les diferents variables
summary(pca)
var_prop <- pca$sdev^2/sum(pca$sdev^2)
scatter3d(pca$x[,1], pca$x[,2], pca$x[,3], col = rev(var_prop), size = 3)
#Plotejat 3D del model PCA
scatter3d(pca$ind$coord[,1], pca$ind$coord[,2], pca$ind$coord[,3],color = "blue",
pch = 19, cex = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
var_labels <- colnames(datos_nci)
biplot(pca, scale = 0)
text3d(pca$rotation[,1], pca$rotation[,2], pca$rotation[,3], labels = var_labels, col = "blue", adj = 0.5, cex = 0.8)
cor_matrix <- cor(datos_nci)
plot3d(cor_matrix, type = "s", size = 2)
library(scatterplot3d)
scatterplot3d(pca$x[,1:3], col.axis="blue", pch=16)
#Carreguem les dades dels altres pisos
drive_download("PeuCreu1.xlsx",overwrite = TRUE)
#Carreguem les dades dels altres pisos
PeuCreu<- read_excel(path = "PeuCreu1.xlsx")
#Carreguem les dades dels altres pisos
library(readxl)
PeuCreu<- read_excel(path = "PeuCreu1.xlsx")
PeuCreu<- read_excel(path = "PeuCreu.xlsx")
datos_PeuCreu<- PeuCreu[,3:13]
scaled_PeuCreu <- scale(datos_PeuCreu)
rotated_PeuCreu <- prcomp(scaled_PeuCreu, center=TRUE, scale.=TRUE)$x
PeuCreu_coords <- predict(pca, rotated_PeuCreu)
x <- PeuCreu_coords$coord[, 1]
y <- PeuCreu_coords$coord[, 2]
z <- PeuCreu_coords$coord[, 3]
points3d(x, y, z, col = "red", pch = 19, cex = 1.5, xlab = "Eje X", zlab = "Eje Z")
x <- pca$ind$coord[, 1]
y <- pca$ind$coord[, 2]
z <- pca$ind$coord[, 3]
pcm <- prcomp(pca$ind$coord, center = TRUE, scale. = TRUE)
x1<-pcm$center[1]
y1<-pcm$center[2]
z1<-pcm$center[3]
datos<-data.frame(x,y,z,x1,y1,z1)
# Ajustar la elipse alrededor del conjunto de datos principales
cov_matrix <- cov(datos[, c("x", "y", "z")])
eigen_values <- eigen(cov_matrix)$values
eigen_vectors <- eigen(cov_matrix)$vectors
center <- colMeans(datos[, c("x1", "y1", "z1")])
radius_x <- sqrt(qchisq(0.95, df = 3) * eigen_values[1])
radius_y <- sqrt(qchisq(0.95, df = 3) * eigen_values[2])
radius_z <- sqrt(qchisq(0.95, df = 3) * eigen_values[3])
orientation <- eigen_vectors
position <- center - c(radius_x, radius_y, radius_z) %*% t(orientation)
# Plotear la elipse alrededor del conjunto de datos principales
open3d()
# Verificar que x sea una matriz
if (!is.matrix(x)) {
stop("Error: x is not a matrix.")
} else {
# Continuar con el resto del código
}
rgl::ellipse3d(center = center, radii = c(radius_x, radius_y, radius_z),
orientation = orientation, position = position, color = "blue")
points3d(puntos$x, puntos$y, puntos$z, col = "green")
points3d(x, y, z, col = "red", pch = 19, cex = 1.5, xlab = "Eje X", zlab = "Eje Z")
#Generació del model PCA en 2D i plotejat de gràfics representatius
pca2d <- PCA(datos_nci,ncp=5,graph=FALSE)
pca3d <- PCA(rotated_data,ncp=3,graph=FALSE)
#Dades i grafics interessants sobre la variància i desviació estàndard de les diferents variables
summary(pca3d)
#Plotejat 3D del model PCA
scatter3d(pca3d$ind$coord[,1], pca3d$ind$coord[,2], pca3d$ind$coord[,3],color = "blue",
pch = 19, cex = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
PeuCreu_coords <- predict(pca3d, rotated_PeuCreu)
x <- PeuCreu_coords$coord[, 1]
y <- PeuCreu_coords$coord[, 2]
z <- PeuCreu_coords$coord[, 3]
points3d(x, y, z, col = "red", pch = 19, cex = 1.5, xlab = "Eje X", zlab = "Eje Z")
text3d(pca3d$var$coord[,1], pca3d$var$coord[,2], pca3d$var$coord[,3], texts = colnames(datos_nci), col = "blue", adj = 0.5, cex = 0.8)
points3d(x, y, z, col = "red", pch = 19, cex = 1.5, xlab = "Eje X", zlab = "Eje Z")
points3d(x, y, z, col = "red", pch = 19, cex = 1.5, xlab = "Eje X", zlab = "Eje Z")
#Precàrrega de llibreries i paquets necessaris pel processat de dades i l'estudi PCA
install.packages("factoextra")
install.packages("FactoMineR")
library(factoextra)
library(FactoMineR)
#Càrrega del dataset de les dades del pis de referència - Parellada (A)
library(stats)
install.packages("readxl")
library("readxl")
Parellada <- read_excel("Parellada.xlsx")
datos_nci <- Parellada[3:13]
#Escalat de dades de la matriu per a plotejar correctament el conjunt
scaled_data <- scale(datos_nci)
#Generació del model PCA en 2D i plotejat de gràfics representatius
pca2d <- PCA(datos_nci,ncp=5,graph=FALSE)
fviz_pca_var(pca, col.var = "contrib") # Scree plot
fviz_pca_biplot(pca, col.var = "contrib") # Biplot
#Generació del model PCA per plotejat 3D
library(car)
library(carData)
install.packages("rgl")
library(rgl)
library("rgl")
library("nlme")
library("mgcv")
scaled_data <- scale(datos_nci)
rotated_data <- prcomp(scaled_data, center=TRUE, scale.=TRUE)$x
pca3d <- PCA(rotated_data,ncp=3,graph=FALSE)
#Dades i grafics interessants sobre la variància i desviació estàndard de les diferents variables
summary(pca3d)
var_prop <- pca3d$sdev^2/sum(pca3d$sdev^2)
#Plotejat 3D del model PCA
scatter3d(pca3d$ind$coord[,1], pca3d$ind$coord[,2], pca3d$ind$coord[,3],color = "blue",
pch = 19, cex = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
cor_matrix <- cor(datos_nci)
plot3d(cor_matrix, type = "s", size = 2)
#Carreguem les dades dels altres pisos
library(readxl)
PeuCreu<- read_excel(path = "PeuCreu.xlsx")
datos_PeuCreu<- PeuCreu[,3:13]
scaled_PeuCreu <- scale(datos_PeuCreu)
rotated_PeuCreu <- prcomp(scaled_PeuCreu, center=TRUE, scale.=TRUE)$x
PeuCreu_coords <- predict(pca3d, rotated_PeuCreu)
x <- PeuCreu_coords$coord[, 1]
y <- PeuCreu_coords$coord[, 2]
z <- PeuCreu_coords$coord[, 3]
points3d(x, y, z, col = "red", pch = 19, cex = 1.5, xlab = "Eje X", zlab = "Eje Z")
scatter3d(pca3d$ind$coord[,1], pca3d$ind$coord[,2], pca3d$ind$coord[,3],color = "blue",
pch = 19, cex = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
points3d(x, y, z, col = "red", pch = 19, cex = 1.5, xlab = "Eje X", zlab = "Eje Z")
#Precàrrega de llibreries i paquets necessaris pel processat de dades i l'estudi PCA
install.packages("factoextra")
install.packages("FactoMineR")
library(factoextra)
library(FactoMineR)
#Càrrega del dataset de les dades del pis de referència - Parellada (A)
library(stats)
install.packages("readxl")
library("readxl")
Parellada <- read_excel("CASA_PARELLADAS.xlsx")
install.packages("factoextra")
install.packages("factoextra")
View(Parellada)
View(Parellada)
datos_nci <- Parellada[2:19]
#Escalat de dades de la matriu per a plotejar correctament el conjunt
scaled_data <- scale(datos_nci)
#Generació del model PCA en 2D i plotejat de gràfics representatius
pca2d <- PCA(datos_nci,ncp=5,graph=FALSE)
fviz_pca_var(pca, col.var = "contrib") # Scree plot
fviz_pca_biplot(pca, col.var = "contrib") # Biplot
#Generació del model PCA per plotejat 3D
library(car)
library(carData)
install.packages("rgl")
library(rgl)
library("rgl")
library("nlme")
library("mgcv")
scaled_data <- scale(datos_nci)
rotated_data <- prcomp(scaled_data, center=TRUE, scale.=TRUE)$x
pca3d <- PCA(rotated_data,ncp=3,graph=FALSE)
#Dades i grafics interessants sobre la variància i desviació estàndard de les diferents variables
summary(pca3d)
var_prop <- pca3d$sdev^2/sum(pca3d$sdev^2)
#Plotejat 3D del model PCA
scatter3d(pca3d$ind$coord[,1], pca3d$ind$coord[,2], pca3d$ind$coord[,3],color = "blue",
pch = 19, cex = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
cor_matrix <- cor(datos_nci)
plot3d(cor_matrix, type = "s", size = 2)
#Carreguem les dades dels altres pisos
library(readxl)
Pompeu<- read_excel(path = "CASA_PADRE_MARC.xlsx")
datos_Pompeu<- Pompeu[,2:19]
scaled_Pompeu <- scale(datos_Pompeu)
rotated_Pompeu <- prcomp(scaled_Pompeu, center=TRUE, scale.=TRUE)$x
Pompeu_coords <- predict(pca3d, rotated_Pompeu)
x <- Pompeu_coords$coord[, 1]
y <- Pompeu_coords$coord[, 2]
z <- Pompeu_coords$coord[, 3]
scatter3d(pca3d$ind$coord[,1], pca3d$ind$coord[,2], pca3d$ind$coord[,3],color = "blue",
pch = 19, cex = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
points3d(x, y, z, col = "red", pch = 19, cex = 1.5, xlab = "Eje X", zlab = "Eje Z")
x <- pca$ind$coord[, 1]
y <- pca$ind$coord[, 2]
z <- pca$ind$coord[, 3]
pcm <- prcomp(pca$ind$coord, center = TRUE, scale. = TRUE)
x1<-pcm$center[1]
y1<-pcm$center[2]
z1<-pcm$center[3]
datos<-data.frame(x,y,z,x1,y1,z1)
# Ajustar l'el·lipse al voltant del conjunt de dades principals
cov_matrix <- cov(datos[, c("x", "y", "z")])
eigen_values <- eigen(cov_matrix)$values
eigen_vectors <- eigen(cov_matrix)$vectors
center <- colMeans(datos[, c("x1", "y1", "z1")])
radius_x <- sqrt(qchisq(0.95, df = 3) * eigen_values[1])
radius_y <- sqrt(qchisq(0.95, df = 3) * eigen_values[2])
radius_z <- sqrt(qchisq(0.95, df = 3) * eigen_values[3])
orientation <- eigen_vectors
position <- center - c(radius_x, radius_y, radius_z) %*% t(orientation)
# Plotejar l'el·lipse alvoltant del conjunt de dades principals
open3d()
# Verificar que x sigui una matriu
if (!is.matrix(x)) {
stop("Error: x is not a matrix.")
} else {
# Continuar con el resto del código
}
rgl::ellipse3d(center = center, radii = c(radius_x, radius_y, radius_z),
orientation = orientation, position = position, color = "blue")
points3d(puntos$x, puntos$y, puntos$z, col = "green")
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
#Install libraries
install.packages("usethis")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("readxl")
install.packages("rgl")
install.packages("mgcv")
install.packages("nlme")
install.packages("car", dependencies = TRUE)
install.packages("scatterplot3d")
# Load libraries into memory
library(factoextra)
library(FactoMineR)
library(stats)
library(carData)
library(car)
library(rgl)
library(readxl)
library(nlme)
library(mgcv)
library(corrplot)
library(scatterplot3d)
# Load the dataset of the reference home
Parellada <- read_excel("CASA_PARELLADA_PCA.XLSX")
datos_nci <- Parellada[2:17]
# Scale dataset in order to plot properly
scaled_data <- scale(datos_nci)
# Create the PCA model
rotated_data <- prcomp(scaled_data, center=TRUE, scale.=TRUE)$x
pca3d <- PCA(rotated_data,ncp=3,graph=FALSE)
# Get some useful data from the PCA model
PCA_center <- colMeans(pca3d$ind$coord)
PCA_cov <- cov(pca3d$ind$coord)
# Create an ellipsoid object to represent the conficende region
ellipsoid <- ellipse3d(PCA_cov, centre = PCA_center,level = 0.95)
# Set coordinates of the PCA Analysis into auxiliary variables
PCA_x <- pca3d$ind$coord[,1]
PCA_y <- pca3d$ind$coord[,2]
PCA_z <- pca3d$ind$coord[,3]
# Plot the PCA model
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
# Load the datasets of the others homes
Pompeu<- read_excel(path = "CASA_PADRE_MARC_PCA.xlsx")
datos_Pompeu<- Pompeu[,2:17]
Montigala<- read_excel(path = "CASA_MARC_PCA.xlsx")
datos_Montigala<- Montigala[,2:17]
Nil<- read_excel(path = "CASA_MARTA_PCA.xlsx")
datos_Nil<- Nil[,2:17]
Pitagoras<- read_excel(path = "CASA_NATALIA_PCA.xlsx")
datos_Pitagoras<- Pitagoras[,2:17]
Junta<- read_excel(path = "CASA_JUNTA_COMERÇ_PCA.xlsx")
datos_Junta<- Junta[,2:17]
Erasme<- read_excel(path = "CASA_SANT_ERASME_PCA.xlsx")
datos_Erasme<- Erasme[,2:17]
Manso<- read_excel(path = "GENERAL_MANSO_PCA.xlsx")
datos_Manso<- Manso[,2:17]
Hospi<- read_excel(path = "HOSPITALET_DE_LLOBREGAT_PCA.xlsx")
datos_Hospi<- Hospi[,2:17]
# Scale dataset in order to plot properly
scaled_Pompeu <- scale(datos_Pompeu)
scaled_Montigala <- scale(datos_Montigala)
scaled_Nil <- scale(datos_Nil)
scaled_Pitagoras <- scale(datos_Pitagoras)
scaled_Junta <- scale(datos_Junta)
scaled_Erasme <- scale(datos_Erasme)
scaled_Manso <- scale(datos_Manso)
scaled_Hospi <- scale(datos_Hospi)
# Make a prediction based on the PCA model
rotated_Pompeu <- prcomp(scaled_Pompeu, center=TRUE, scale.=TRUE)$x
Pompeu_coords <- predict(pca3d, rotated_Pompeu)
rotated_Montigala <- prcomp(scaled_Montigala, center=TRUE, scale.=TRUE)$x
Montigala_coords <- predict(pca3d, rotated_Montigala)
rotated_Nil <- prcomp(scaled_Nil, center=TRUE, scale.=TRUE)$x
Nil_coords <- predict(pca3d, rotated_Nil)
rotated_Pitagoras <- prcomp(scaled_Pitagoras, center=TRUE, scale.=TRUE)$x
Pitagoras_coords <- predict(pca3d, rotated_Pitagoras)
rotated_Junta <- prcomp(scaled_Junta, center=TRUE, scale.=TRUE)$x
Junta_coords <- predict(pca3d, rotated_Junta)
rotated_Erasme <- prcomp(scaled_Erasme, center=TRUE, scale.=TRUE)$x
Erasme_coords <- predict(pca3d, rotated_Erasme)
rotated_Manso <- prcomp(scaled_Manso, center=TRUE, scale.=TRUE)$x
Manso_coords <- predict(pca3d, rotated_Manso)
rotated_Hospi <- prcomp(scaled_Hospi, center=TRUE, scale.=TRUE)$x
Hospi_coords <- predict(pca3d, rotated_Hospi)
# Set coordinates of the prediction into auxiliar variables
Pompeu_x <- Pompeu_coords$coord[, 1]
Pompeu_y <- Pompeu_coords$coord[, 2]
# Load the datasets of the others homes
Pompeu<- read_excel(path = "CASA_PADRE_MARC_PCA.xlsx")
# Load the datasets of the others homes
Pompeu<- read_excel(path = "CASA_PADRE_MARC_PCA.xlsx")
# Load the datasets of the others homes
Pompeu<- read_excel(path = "CASA_PADRE_MARC_PCA.xlsx")
# Load the datasets of the others homes
Pompeu<- read_excel(path = "CASA_PADRE_MARC_PCA.xlsx")
# Load the datasets of the others homes
Pompeu<- read_excel(path = "CASA_PADRE_MARC_PCA.xlsx")
datos_Pompeu<- Pompeu[,2:17]
Montigala<- read_excel(path = "CASA_MARC_PCA.xlsx")
datos_Montigala<- Montigala[,2:17]
install.packages("usethis")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("readxl")
install.packages("rgl")
install.packages("mgcv")
install.packages("nlme")
install.packages("car", dependencies = TRUE)
install.packages("scatterplot3d")
library(factoextra)
library(FactoMineR)
library(stats)
library(carData)
library(car)
library(rgl)
library(readxl)
library(nlme)
library(mgcv)
library(corrplot)
library(scatterplot3d)
# Load the dataset of the reference home
Parellada <- read_excel("CASA_PARELLADA_PCA.XLSX")
#Install libraries
install.packages("usethis")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("readxl")
install.packages("rgl")
install.packages("mgcv")
install.packages("nlme")
install.packages("car", dependencies = TRUE)
install.packages("scatterplot3d")
# Load libraries into memory
library(factoextra)
library(FactoMineR)
library(stats)
library(carData)
library(car)
library(rgl)
library(readxl)
library(nlme)
library(mgcv)
library(corrplot)
library(scatterplot3d)
#Install libraries
install.packages("usethis")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("readxl")
install.packages("rgl")
install.packages("mgcv")
install.packages("nlme")
install.packages("car", dependencies = TRUE)
install.packages("scatterplot3d")
# Load libraries into memory
library(factoextra)
library(FactoMineR)
library(stats)
library(carData)
library(car)
library(rgl)
library(readxl)
library(nlme)
library(mgcv)
library(corrplot)
library(scatterplot3d)
install.packages("FactoMineR")
install.packages("nlme")
# Load the dataset of the reference home
Parellada <- read_excel("CASA_PARELLADA_PCA.XLSX")
library(factoextra)
library(FactoMineR)
library(stats)
library(carData)
library(car)
library(rgl)
library(readxl)
library(nlme)
library(mgcv)
library(corrplot)
library(scatterplot3d)
# Load the dataset of the reference home
Parellada <- read_excel("CASA_PARELLADA_PCA.XLSX")
# Load the dataset of the reference home
Parellada <- read_excel("CASA_PARELLADA_PCA.XLSX")
setwd(C:/Users/marce/OneDrive/Documentos/GitHub/PCA-Analysis)
> setwd(C:Users/marce/OneDrive/Documentos/GitHub/PCA-Analysis)
setwd(C:Users/marce/OneDrive/Documentos/GitHub/PCA-Analysis)
# Load the dataset of the reference home
Parellada <- read_excel("CASA_PARELLADA_PCA.XLSX")
setwd("/Users/marce/OneDrive/Documentos/GitHub/PCA-Analysis")
# Load the dataset of the reference home
Parellada <- read_excel("CASA_PARELLADA_PCA.XLSX")
datos_nci <- Parellada[-c(2,3,6,9,10,14,17)]
mean.nci <- colMeans(datos_nci)
View(datos_nci)
datos_nci <- Parellada[-c(1,2,3,6,9,10,14,17)]
mean.nci <- colMeans(datos_nci)
std.nci <- apply(datos_nci,2,sd)
# Scale dataset in order to plot properly
scaled_data <- scale(datos_nci, center=mean.nci, scale=std.nci)
# Create the PCA model
pca3d <- PCA(scaled_data,ncp=3,graph=TRUE)
# Get some useful data from the PCA model
PCA_center <- colMeans(pca3d$ind$coord)
PCA_cov <- cov(pca3d$ind$coord)
# Create an ellipsoid object to represent the conficende region
ellipsoid <- ellipse3d(PCA_cov, centre = PCA_center,level = 0.9)
# Set coordinates of the PCA Analysis into auxiliary variables
PCA_x <- pca3d$ind$coord[,1]
PCA_y <- pca3d$ind$coord[,2]
PCA_z <- pca3d$ind$coord[,3]
# Plot the PCA model
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
# Load the datasets of the others homes
Pompeu<- read_excel(path = "CASA_PADRE_MARC_PCA.xlsx")
datos_Pompeu<- Pompeu[-c(1,2,3,6,9,10,14,17)]
# Scale dataset in order to plot properly
scaled_Pompeu <- scale(datos_Pompeu,center=mean.nci, scale=std.nci)
# Make a prediction based on the PCA model
Pompeu_coords <- predict(pca3d, scaled_Pompeu)
# Set coordinates of the prediction into auxiliar variables
Pompeu_x <- Pompeu_coords$coord[, 1]
Pompeu_y <- Pompeu_coords$coord[, 2]
Pompeu_z <- Pompeu_coords$coord[, 3]
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot",xlim = c(-25, 5), ylim = c(-10, 8),zlim = c(-20,10))
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5)
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# 2D PCA model generation and plotting of different representative graphs
pca2d <- PCA(scaled_data,ncp=5,graph=FALSE)
fviz_pca_var(pca2d, col.var = "contrib") # Scree plot
fviz_pca_biplot(pca2d, col.var = "contrib") # Biplot
cor_matrix <- cor(scaled_data)
corrplot(cor_matrix, method = "color") # Correlation variables matrix
# Interesting data about 3D PCA model and graphs abaout variance and standard deviation of the different variables
summary(pca3d)
eig.val <- get_eigenvalue(pca3d)
fviz_eig(pca3d, addlabels = TRUE, ylim = c(0, 50))
var <- get_pca_var(pca3d)
corrplot(var$contrib, is.corr=FALSE)
plot3d(cor_matrix, type = "s", size = 2)
# Contributions of variables to PC1 and PC2
fviz_contrib(pca3d, choice = "var", axes = 1, top = 10)
fviz_contrib(pca3d, choice = "var", axes = 2, top = 10)
# Load the dataset of the reference home
Parellada <- read_excel("CASA_PARELLADA_PCA.XLSX")
datos_nci <- Parellada[-c(1,4,5,7,8,11,12,13,15,16)]
mean.nci <- colMeans(datos_nci)
std.nci <- apply(datos_nci,2,sd)
# Scale dataset in order to plot properly
scaled_data <- scale(datos_nci, center=mean.nci, scale=std.nci)
# Create the PCA model
pca3d <- PCA(scaled_data,ncp=3,graph=TRUE)
# Get some useful data from the PCA model
PCA_center <- colMeans(pca3d$ind$coord)
PCA_cov <- cov(pca3d$ind$coord)
# Create an ellipsoid object to represent the conficende region
ellipsoid <- ellipse3d(PCA_cov, centre = PCA_center,level = 0.9)
# Set coordinates of the PCA Analysis into auxiliary variables
PCA_x <- pca3d$ind$coord[,1]
PCA_y <- pca3d$ind$coord[,2]
PCA_z <- pca3d$ind$coord[,3]
# Plot the PCA model
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
# Plot the PCA model
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
# Load the datasets of the others homes
Pompeu<- read_excel(path = "CASA_PADRE_MARC_PCA.xlsx")
datos_Pompeu<- Pompeu[-c(1,2,3,6,9,10,14,17)]
datos_Pompeu<- Pompeu[-c(1,4,5,7,8,11,12,13,15,16)]
# Scale dataset in order to plot properly
scaled_Pompeu <- scale(datos_Pompeu,center=mean.nci, scale=std.nci)
# Make a prediction based on the PCA model
Pompeu_coords <- predict(pca3d, scaled_Pompeu)
# Set coordinates of the prediction into auxiliar variables
Pompeu_x <- Pompeu_coords$coord[, 1]
Pompeu_y <- Pompeu_coords$coord[, 2]
Pompeu_z <- Pompeu_coords$coord[, 3]
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot",xlim = c(-25, 5), ylim = c(-10, 8),zlim = c(-20,10))
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5)
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
setwd("/Users/marce/OneDrive/Escritorio/UNI/Cuarto Año/TFG/PCA-Analysis")
