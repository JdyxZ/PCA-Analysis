install.packages("factoextra")
install.packages("FactoMineR")
install.packages("readxl")
install.packages("rgl")
library(factoextra)
library(FactoMineR)
library(stats)
library(car)
library(carData)
library(rgl)
library(readxl)
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("readxl")
install.packages("rgl")
library(factoextra)
library(FactoMineR)
library(stats)
library(car)
library(carData)
library(rgl)
library(readxl)
install.packages("rgl")
write('PATH="${RTOOLS43_HOME};${PATH}"', file = "~/.Renviron", append = TRUE)
library(factoextra)
library(FactoMineR)
library(stats)
library(carData)
library(car)
library(rgl)
library(readxl)
library(nlme)
library(mgcv)
library(corrplot)
Parellada <- read_excel("CASA_PARELLADAS.xlsx")
setwd("C:/University/FOURTH YEAR/PCA-Analysis")
#Càrrega del dataset de les dades del pis de referencia - Parellada (A)
Parellada <- read_excel("CASA_PARELLADAS.xlsx")
datos_nci <- Parellada[2:19]
#Escalat de dades de la matriu per a plotejar correctament el conjunt
scaled_data <- scale(datos_nci)
#Generació del model PCA per plotejat 3D
rotated_data <- prcomp(scaled_data, center=TRUE, scale.=TRUE)$x
pca3d <- PCA(rotated_data,ncp=3,graph=FALSE)
# Set coordinates into auxiliar variables
PCA_x <- pca3d$ind$coord[,1]
PCA_y <- pca3d$ind$coord[,2]
PCA_z <- pca3d$ind$coord[,3]
#Plotejat 3D del model PCA
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
#Carreguem les dades dels altres pisos
Pompeu<- read_excel(path = "CASA_PADRE_MARC.xlsx")
datos_Pompeu<- Pompeu[,2:19]
scaled_Pompeu <- scale(datos_Pompeu)
rotated_Pompeu <- prcomp(scaled_Pompeu, center=TRUE, scale.=TRUE)$x
Pompeu_coords <- predict(pca3d, rotated_Pompeu)
# Set coordinates into auxiliar variables
Pompeu_x <- Pompeu_coords$coord[, 1]
Pompeu_y <- Pompeu_coords$coord[, 2]
Pompeu_z <- Pompeu_coords$coord[, 3]
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
scatter3d(Pompeu_x, Pompeu_y, Pompeu_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = FALSE)
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
scatter3d(Pompeu_x, Pompeu_y, Pompeu_z, point.col = "red",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = FALSE)
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
points3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", add=TRUE)
points3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", add=TRUE)
points3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", add=TRUE)
library(factoextra)
library(FactoMineR)
library(stats)
library(carData)
library(car)
library(rgl)
library(readxl)
library(nlme)
library(mgcv)
library(corrplot)
points3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", add=TRUE)
points3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", add=TRUE)
points3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", add=TRUE)
install.packages("usethis")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("readxl")
install.packages("rgl")
install.packages("mgcv")
install.packages("nlme")
install.packages("car", dependencies = TRUE)
install.packages("rgl")
install.packages("car", dependencies = TRUE)
install.packages("FactoMineR")
install.packages("factoextra")
install.packages("readxl")
install.packages("FactoMineR")
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
# Load libraries into memory
library(factoextra)
library(FactoMineR)
library(stats)
library(carData)
library(car)
library(rgl)
library(readxl)
library(nlme)
library(mgcv)
library(corrplot)
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
points3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", add=TRUE)
points3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", add=TRUE)
points3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", add=TRUE)
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
points3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", add=TRUE)
scatter3d(x, y, z, groups = groups, sphere.size = 1.7,
xlab = "PC1", ylab = "PC2", zlab = "PC3", surface=FALSE)
# Get values lengths
PCA_Length <- nrow(pca3d$ind$coord)
Predicted_Length <- nrow(Pompeu_coords$coord)
# Combine PCA analysis values and new predicted values of the model into an array
x <- c(pca3d$ind$coord[,1], Pompeu_coords$coord[, 1])
y <- c(pca3d$ind$coord[,2], Pompeu_coords$coord[, 2])
z <- c(pca3d$ind$coord[,3], Pompeu_coords$coord[, 3])
# Create a grouping variable
groups <- factor(c(rep("PCA Analysis", PCA_Length), rep("Predicted", Predicted_Length)))
# Plot values
scatter3d(x, y, z, groups = groups, sphere.size = 1.7,
xlab = "PC1", ylab = "PC2", zlab = "PC3", surface=FALSE)
scatter3d(x, y, z, groups = groups, sphere.size = 1.7,
xlab = "PC1", ylab = "PC2", zlab = "PC3", surface=FALSE, ellipsoid=TRUE)
scatter3d(x, y, z, groups = groups, sphere.size = 1.7,
xlab = "PC1", ylab = "PC2", zlab = "PC3", surface=FALSE, ellipsoid=TRUE)
scatter3d(x, y, z, groups = groups, sphere.size = 1.7,
xlab = "PC1", ylab = "PC2", zlab = "PC3", surface=FALSE)
scatter3d(x, y, z, groups = groups, sphere.size = 1.7,
xlab = "PC1", ylab = "PC2", zlab = "PC3", surface=FALSE)
plot3d(PCA_x, PCA_y, PCA_z, col = "steelblue",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
plot3d(PCA_x, PCA_y, PCA_z, col = "red",
type = "s", size = 0.5, add=TRUE)
plot3d(PCA_x, PCA_y, PCA_z, col = "steelblue",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
type = "s", size = 0.5, add=TRUE)
# Calculate the center and covariance matrix of the PCA data
PCA_center <- colMeans(cbind(PCA_x, PCA_y, PCA_z))
PCA_cov <- cov(cbind(PCA_x, PCA_y, PCA_z))
# Calculate the eigenvalues and eigenvectors of the covariance matrix
eig <- eigen(PCA_cov)
eig_values <- eig$values
eig_vectors <- eig$vectors
# Calculate the semi-axes of the ellipsoid
semi_axes <- sqrt(eig_values)
plot3d(PCA_x, PCA_y, PCA_z, col = "steelblue",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
type = "s", size = 0.5, add=TRUE)
# Create an ellipsoid object
ellipsoid <- ellipse3d(semi_axes[1], semi_axes[2], semi_axes[3],
centre = PCA_center,
rotationMatrix = eig_vectors)
plot3d(PCA_x, PCA_y, PCA_z, col = "steelblue",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", ellipsoid = TRUE)
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
type = "s", size = 0.5, add=TRUE)
semi_axes
PCA_center <- colMeans(cbind(PCA_x, PCA_y, PCA_z))
PCA_cov <- cov(cbind(PCA_x, PCA_y, PCA_z))
PCA_cov
cbind(PCA_x, PCA_y, PCA_z)
PCA_cov <- cov(pca3d$ind$coord)
PCA_cov
PCA_center <- colMeans(pca3d$ind$coord)
PCA_cov <- cov(pca3d$ind$coord)
eig <- eigen(PCA_cov)
eig
semi_axes
ellipsoid <- ellipse3d(semi_axes[1], semi_axes[2], semi_axes[3],
centre = PCA_center,
rotationMatrix = eig_vectors)
# Create an ellipsoid object using the ellipse3d function
ellipsoid <- ellipse3d(PCA_cov, centre = PCA_center)
# Draw the ellipsoid on the plot
shade3d(ellipsoid, alpha = 0.5)
plot3d(PCA_x, PCA_y, PCA_z, col = "steelblue",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "red",
type = "s", size = 0.5, add=TRUE)
# Draw the ellipsoid on the plot
shade3d(ellipsoid, alpha = 0.5)
# Plot values
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
# Draw the ellipsoid on the plot
shade3d(ellipsoid, alpha = 0.5)
# Plot values
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
# Draw the ellipsoid on the plot
shade3d(ellipsoid, alpha = 0.5)
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot the condicende region
shade3d(ellipsoid, alpha = 0.3)
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot the condicende region
shade3d(ellipsoid, col = "red", alpha = 0.5, material = material3d(shininess = 100))
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5, material = material3d(shininess = 100))
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5)
scatterplot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
scatterplot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3")
install.packages("scatterplot3d")
library(scatterplot3d)
install.packages("scatterplot3d")
install.packages("scatterplot3d")
scatterplot3d(PCA_x, PCA_y, PCA_z, col = "purple",
xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(PCA_x, PCA_y, PCA_z, col = "purple",
xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
library(factoextra)
library(FactoMineR)
library(stats)
library(carData)
library(car)
library(rgl)
library(readxl)
library(nlme)
library(mgcv)
library(corrplot)
library(scatterplot3d)
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5)
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5)
#Install libraries
install.packages("usethis")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("readxl")
install.packages("rgl")
install.packages("mgcv")
install.packages("nlme")
install.packages("car", dependencies = TRUE)
install.packages("scatterplot3d")
# Load libraries into memory
library(factoextra)
library(FactoMineR)
library(stats)
library(carData)
library(car)
library(rgl)
library(readxl)
library(nlme)
library(mgcv)
library(corrplot)
library(scatterplot3d)
# Load the dataset of the reference home
Parellada <- read_excel("CASA_PARELLADAS.xlsx")
datos_nci <- Parellada[2:19]
# Scale dataset in order to plot properly
scaled_data <- scale(datos_nci)
# Create the PCA model
rotated_data <- prcomp(scaled_data, center=TRUE, scale.=TRUE)$x
pca3d <- PCA(rotated_data,ncp=3,graph=FALSE)
# Get some useful data from the PCA model
PCA_center <- colMeans(pca3d$ind$coord)
PCA_cov <- cov(pca3d$ind$coord)
# Create an ellipsoid object to represent the conficende region
ellipsoid <- ellipse3d(PCA_cov, centre = PCA_center)
# Set coordinates of the PCA Analysis into auxiliary variables
PCA_x <- pca3d$ind$coord[,1]
PCA_y <- pca3d$ind$coord[,2]
PCA_z <- pca3d$ind$coord[,3]
# Plot the PCA model
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
# Load the datasets of the others homes
Pompeu<- read_excel(path = "CASA_PADRE_MARC.xlsx")
datos_Pompeu<- Pompeu[,2:19]
# Scale dataset in order to plot properly
scaled_Pompeu <- scale(datos_Pompeu)
# Make a prediction based on the PCA model
rotated_Pompeu <- prcomp(scaled_Pompeu, center=TRUE, scale.=TRUE)$x
Pompeu_coords <- predict(pca3d, rotated_Pompeu)
# Set coordinates of the prediction into auxiliar variables
Pompeu_x <- Pompeu_coords$coord[, 1]
Pompeu_y <- Pompeu_coords$coord[, 2]
Pompeu_z <- Pompeu_coords$coord[, 3]
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5)
# Create an ellipsoid object to represent the conficende region
ellipsoid <- ellipse3d(PCA_cov, centre = PCA_center,level = 0.95)
# Set coordinates of the PCA Analysis into auxiliary variables
PCA_x <- pca3d$ind$coord[,1]
PCA_y <- pca3d$ind$coord[,2]
PCA_z <- pca3d$ind$coord[,3]
# Plot the PCA model
scatter3d(PCA_x, PCA_y, PCA_z, point.col = "steelblue",
sphere.size = 1.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", surface = FALSE, ellipsoid = TRUE)
# Load the datasets of the others homes
Pompeu<- read_excel(path = "CASA_PADRE_MARC.xlsx")
datos_Pompeu<- Pompeu[,2:19]
# Scale dataset in order to plot properly
scaled_Pompeu <- scale(datos_Pompeu)
# Make a prediction based on the PCA model
rotated_Pompeu <- prcomp(scaled_Pompeu, center=TRUE, scale.=TRUE)$x
Pompeu_coords <- predict(pca3d, rotated_Pompeu)
# Set coordinates of the prediction into auxiliar variables
Pompeu_x <- Pompeu_coords$coord[, 1]
Pompeu_y <- Pompeu_coords$coord[, 2]
Pompeu_z <- Pompeu_coords$coord[, 3]
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5)
# Create an ellipsoid object to represent the conficende region
ellipsoid <- ellipse3d(PCA_cov, centre = PCA_center,level = 0.85)
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5)
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5)
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
# Plot PCA Analysis data
plot3d(PCA_x, PCA_y, PCA_z, col = "purple",
type = "s", size = 0.5, xlab = "PC1", ylab = "PC2", zlab = "PC3", main="3D Scatter Plot")
# Plot Prediction Model data
plot3d(Pompeu_x, Pompeu_y, Pompeu_z, col = "yellow",
type = "s", size = 0.5, add=TRUE)
# Plot the condicende region
shade3d(ellipsoid, col = "blue", alpha = 0.5)
# Create an ellipsoid object to represent the conficende region
ellipsoid <- ellipse3d(PCA_cov, centre = PCA_center,level = 0.95)
